import os
import subprocess
import concurrent.futures

import unittest
import coverage

# Create a coverage object
cov = coverage.Coverage()

# Start the coverage measurement
cov.start()

# Discover and run the tests
test_suite = unittest.defaultTestLoader.discover('.')
unittest.TextTestRunner().run(test_suite)

# Stop the coverage measurement
cov.stop()

# Save the coverage data to a file
cov.save()

# Generate a code coverage report
cov.report()

# Optionally, generate an HTML report
cov.html_report(directory='coverage_html')

# This file will find all test files in the project and run pytest on them.

# DO NOT EDIT THIS FILE
def run_pytest(root_directory):
    test_files = []
    for root, dirs, files in os.walk(root_directory):
        for file in files:
            if file.startswith("tests_") and file.endswith(".py"):
                test_file = os.path.join(root, file)
                test_files.append(test_file)

    with concurrent.futures.ThreadPoolExecutor() as executor:
        results = []
        for test_file in test_files:
            print(f"Running pytest for: {test_file}")
            results.append(executor.submit(subprocess.run, ["pytest --cov", test_file]))
        concurrent.futures.wait(results)

if __name__ == "__main__":
    root_directory = os.path.abspath(os.path.dirname(__file__))
    run_pytest(root_directory)
